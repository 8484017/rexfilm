{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/interceptors/http.interceptor.ts","webpack:///./src/app/resolvers/admin.resolver.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;ACnCA,yG;;;;;;;;;;;ACAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA+D;AACO;AACe;AACxB;AAQ7D;IACE,sBAC+B,UAAkB,EACvC,MAAc;QADO,eAAU,GAAV,UAAU,CAAQ;QACvC,WAAM,GAAN,MAAM,CAAQ;IAIxB,CAAC;IACD,+BAAQ,GAAR;QACE,EAAE,CAAC,CAAC,yEAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACvC,mBAAO,CAAC,wGAAqC,CAAC;YAC9C,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,6DAAM,CAAC,WAAC,IAAI,QAAC,YAAY,+DAAe,IAAI,CAAC,YAAY,6DAAa,EAA1D,CAA0D,CAAC,EAAE,+DAAQ,EAAE,CAAC,CAAC,SAAS,CAAC,WAAC;gBAEtH,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,+DAAe,IAAK,CAAC,CAAC,GAAG,CAAqB,CAAC,iBAAiB,KAAK,YAAY,IAAI,CAAC,CAAC,GAAG,CAAC,YAAY,6DAAa,CAAC,CAAC,CAAC;oBACzI,UAAU,CAAC;wBACT,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;oBACvB,CAAC,EAAE,CAAC,CAAC,CAAC;gBACR,CAAC;YACH,CAAC,CAAC;QAGJ,CAAC;IAEH,CAAC;IAvBU,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,SAAS;;;SAGpB,CAAC;QAGG,uEAAM,CAAC,yDAAW,CAAC;yCAAqB,MAAM;YAC/B,sDAAM;OAHb,YAAY,CAwBxB;IAAD,mBAAC;CAAA;AAxBwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXiC;AACjB;AACoB;AACd;AAC4B;AACd;AACa;AACR;AACa;AA2B/E;IAAA;IAAyB,CAAC;IAAb,SAAS;QAzBrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;aACb;YACD,OAAO,EAAE;gBACP,uEAAa,CAAC,oBAAoB,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC;gBAC1D,4FAAuB;gBACvB,uFAA0B;gBAC1B,qEAAgB;gBAChB,4DAAY,CAAC,OAAO,CAAC;oBACnB,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,yEAAe,CAAC,EAAE,YAAY,EAAE,kCAAkC,EAAE;oBAC7F,EAAE,IAAI,EAAE,UAAU,EAAE,YAAY,EAAE,kCAAkC,EAAE;oBACtE,EAAE,IAAI,EAAE,EAAE,EAAE,YAAY,EAAE,qCAAqC,EAAE;iBAClE,EAAE;oBACC,iBAAiB,EAAE,SAAS;oBAC5B,kBAAkB,EAAE,4DAAY;iBACjC,CAAC;aACL;YACD,SAAS,EAAE,CAAC,yEAAe,EAAE;oBAC3B,OAAO,EAAE,sEAAiB;oBAC1B,QAAQ,EAAE,8EAAe;oBACzB,KAAK,EAAE,IAAI;iBACZ,CAAC;YACF,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjC8D;AACjC;AAGnD;IACI,yBACY,QAAkB,EACG,UAAkB;QADvC,aAAQ,GAAR,QAAQ,CAAU;QACG,eAAU,GAAV,UAAU,CAAQ;IAE/C,CAAC;IAGL,mCAAS,GAAT,UAAU,GAAqB,EAAE,IAAiB;QAE9C,EAAE,CAAC,CAAC,wEAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACpC,IAAI,KAAK,GAAQ,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAC9C,IAAI,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,uBAAuB,GAAG,GAAG,CAAC,GAAG,EAAE,UAAU,EAAE,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;YAC9I,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QAC9B,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;IAC3B,CAAC;IAjBQ,eAAe;QAD3B,gEAAU,EAAE;QAIJ,uEAAM,CAAC,yDAAW,CAAC;yCADF,sDAAQ;YACe,MAAM;OAH1C,eAAe,CAkB3B;IAAD,sBAAC;CAAA;AAlB2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNmE;AAC7C;AAEwB;AAI1E;IAEI,yBACY,IAAgB,EAChB,MAAc;QADd,SAAI,GAAJ,IAAI,CAAY;QAChB,WAAM,GAAN,MAAM,CAAQ;IAEtB,CAAC;IACC,iCAAO,GAAb,UAAc,KAA6B,EAAE,KAA0B;;;;;;4BAG3D,qBAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,WAAC,IAAI,WAAI,EAAJ,CAAI,CAAC,CAAC,KAAK,CAAC,WAAC;4BAErG,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;4BAAC,MAAM,CAAC,KAAK;wBAChD,CAAC,CAAC;;wBAHE,CAAC,GAAG,SAGN;wBACF,sBAAO,IAAI;;;;KAEd;IAhBQ,eAAe;QAD3B,gEAAU,EAAE;yCAIS,+DAAU;YACR,sDAAM;OAJjB,eAAe,CAkB3B;IAAD,sBAAC;CAAA;AAlB2B;;;;;;;;;;;;;;ACP5B;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;ACdpB;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE;IAC5C,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;SAClD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC","file":"main.js","sourcesContent":["var map = {\n\t\"./admin/admin.module\": [\n\t\t\"./src/app/admin/admin.module.ts\",\n\t\t\"admin-admin-module~client-client-module~login-login-module\",\n\t\t\"admin-admin-module\"\n\t],\n\t\"./client/client.module\": [\n\t\t\"./src/app/client/client.module.ts\",\n\t\t\"admin-admin-module~client-client-module~login-login-module\",\n\t\t\"client-client-module\"\n\t],\n\t\"./login/login.module\": [\n\t\t\"./src/app/login/login.module.ts\",\n\t\t\"admin-admin-module~client-client-module~login-login-module\",\n\t\t\"login-login-module\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\tvar module = __webpack_require__(ids[0]);\n\t\treturn module;\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";\nmodule.exports = webpackAsyncContext;","module.exports = \"<ngx-loading-bar [color]=\\\"'red'\\\"></ngx-loading-bar>\\n<router-outlet></router-outlet>\"","module.exports = \"\"","import { Component, PLATFORM_ID, Inject } from '@angular/core';\nimport { isPlatformServer, isPlatformBrowser } from '@angular/common';\nimport { Router, NavigationStart, NavigationEnd, ResolveEnd } from '@angular/router';\nimport { pairwise, switchMap, filter } from 'rxjs/operators';\n\n\n@Component({\n  selector: 'my-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    private router: Router,\n\n  ) {\n\n  }\n  ngOnInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      require('delayed-scroll-restoration-polyfill')\n      this.router.events.pipe(filter(s => s instanceof NavigationStart || s instanceof NavigationEnd), pairwise()).subscribe(s => {\n\n        if (s[0] instanceof NavigationStart && (s[\"0\"] as NavigationStart).navigationTrigger === \"imperative\" && s[\"1\"] instanceof NavigationEnd) {\n          setTimeout(() => {\n            window.scrollTo(0, 0)\n          }, 0);\n        }\n      })\n\n\n    }\n\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, NoPreloading } from \"@angular/router\";\nimport { AppComponent } from './app.component';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { IsAdminResolver } from './resolvers/admin.resolver';\nimport { LoadingBarHttpClientModule } from '@ngx-loading-bar/http-client';\nimport { HttpInterCeptor } from './interceptors/http.interceptor';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    BrowserModule.withServerTransition({ appId: 'serverApp' }),\n    BrowserAnimationsModule,\n    LoadingBarHttpClientModule,\n    HttpClientModule,\n    RouterModule.forRoot([\n      { path: \"m2m\", resolve: [IsAdminResolver], loadChildren: \"./admin/admin.module#AdminModule\" },\n      { path: \"m2mlogin\", loadChildren: \"./login/login.module#LoginModule\" },\n      { path: \"\", loadChildren: \"./client/client.module#ClientModule\" }\n    ], {\n        initialNavigation: \"enabled\",\n        preloadingStrategy: NoPreloading\n      })\n  ],\n  providers: [IsAdminResolver, {\n    provide: HTTP_INTERCEPTORS,\n    useClass: HttpInterCeptor,\n    multi: true\n  }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HTTP_INTERCEPTORS, HttpHeaders } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { Injectable, NgModule, Inject, PLATFORM_ID, Injector } from \"@angular/core\";\nimport { isPlatformServer } from \"@angular/common\";\n\n@Injectable()\nexport class HttpInterCeptor implements HttpInterceptor {\n    constructor(\n        private injector: Injector,\n        @Inject(PLATFORM_ID) private platformId: Object,\n\n    ) { }\n\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n        if (isPlatformServer(this.platformId)) {\n            var exreq: any = this.injector.get('REQUEST');\n            let newreq = req.clone({ url: 'http://127.0.0.1:3000' + req.url, setHeaders: exreq.headers.cookie ? { \"Cookie\": exreq.headers.cookie } : {} })\n            return next.handle(newreq)\n        }\n\n        return next.handle(req)\n    }\n}\n\n\n\n\n","import { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from \"@angular/router\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { map } from \"rxjs/operators\";\nimport { Injectable, Injector, Inject, PLATFORM_ID } from \"@angular/core\";\nimport { isPlatformServer } from \"@angular/common\";\n\n@Injectable()\nexport class IsAdminResolver implements Resolve<boolean>{\n\n    constructor(\n        private http: HttpClient,\n        private router: Router,\n\n    ) { }\n    async resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n\n\n        let r = await this.http.get('/api/isadmin', { responseType: \"text\" }).toPromise().then(s => true).catch(s => {\n\n            this.router.navigateByUrl(\"/\"); return false\n        })\n        return true\n\n    }\n\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  platformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n});\n"],"sourceRoot":""}